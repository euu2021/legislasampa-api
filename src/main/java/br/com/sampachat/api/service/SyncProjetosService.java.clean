package br.com.sampachat.api.service;

import br.com.sampachat.api.dto.splegis.SPLegisProjetoDTO;
import br.com.sampachat.api.dto.splegis.SPLegisResponseDTO;
import br.com.sampachat.api.model.Projeto;
import br.com.sampachat.api.model.TipoProposicao;
import br.com.sampachat.api.repository.ProjetoRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.transaction.annotation.Transactional;

import java.text.Normalizer;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * Serviço responsável por sincronizar projetos do SPLegis com o banco de dados local
 */
@Service
public class SyncProjetosService {
    
    private static final Logger logger = LoggerFactory.getLogger(SyncProjetosService.class);
    private static final String BASE_URL = "https://splegisconsulta.saopaulo.sp.leg.br/Pesquisa/PageDataProjeto";
    public static final Map<Integer, TipoProposicao> TIPO_MAP = new HashMap<>();
    
    static {
        // Mapeamento entre o tipo da API SPLegis e nosso enum TipoProposicao
        TIPO_MAP.put(1, TipoProposicao.PL);    // 1 = PL (Projeto de Lei)
        TIPO_MAP.put(2, TipoProposicao.PDL);   // 2 = PDL (Projeto de Decreto Legislativo)
        TIPO_MAP.put(3, TipoProposicao.PR);    // 3 = PR (Projeto de Resolução)
        TIPO_MAP.put(4, TipoProposicao.PLO);   // 4 = PLO (Projeto de Emenda à Lei Orgânica)
    }
    
    @Autowired
    private ProjetoRepository projetoRepository;
    
    @Autowired
    private EmbeddingService embeddingService;
    
    @Autowired
    private LinkBuilderService linkBuilderService;
    
    @Autowired
    private RestTemplate restTemplate;
    
    @Autowired
    private ObjectMapper objectMapper;
    
    @Autowired
    private SyncStatusService syncStatusService;
    
    @Autowired
    private AlertService alertService;
    
    /**
     * Busca os projetos mais recentes de cada tipo no banco de dados
     */
    public Map<TipoProposicao, Projeto> findLatestProjetosByTipo() {
        Map<TipoProposicao, Projeto> latestProjetos = new HashMap<>();
        
        for (TipoProposicao tipo : TipoProposicao.values()) {
            try {
                // Usando o método JPQL ao invés da query nativa para evitar problemas de casting
                List<Projeto> projetos = projetoRepository.findLatestByTipoJpql(
                        tipo, 
                        PageRequest.of(0, 1)
                );
                
                if (!projetos.isEmpty()) {
                    latestProjetos.put(tipo, projetos.get(0));
                    logger.info("Projeto mais recente do tipo {}: {}/{}", 
                            tipo, projetos.get(0).getNumero(), projetos.get(0).getAno());
                } else {
                    logger.info("Nenhum projeto do tipo {} encontrado no banco de dados", tipo);
                }
            } catch (Exception e) {
                logger.error("Erro ao buscar projetos do tipo {}: {}", tipo, e.getMessage(), e);
            }
        }
        
        return latestProjetos;
    }
    
    /**
     * Inicia uma sincronização assíncrona em segundo plano
     * Este método retorna imediatamente enquanto a sincronização ocorre em uma thread separada
     */
    public void startAsyncSync() {
        logger.info("Iniciando sincronização assíncrona");
        
        // Executa a sincronização em uma thread separada
        asyncSync();
    }
    
    /**
     * Método assíncrono que executa a sincronização em segundo plano
     * A anotação @Async faz com que este método seja executado em uma thread separada
     */
    @Async
    public void asyncSync() {
        logger.info("=== INÍCIO DA SINCRONIZAÇÃO ASSÍNCRONA ===");
        logger.info("Sincronização assíncrona iniciada em {}", 
                LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
        
        try {
            // Verificar e remover duplicatas antes da sincronização
            removeDuplicateProjetosIfNeeded();
            
            // Usar a nova lógica simplificada de sincronização
            syncLatestProjetos();
            
            logger.info("=== SINCRONIZAÇÃO ASSÍNCRONA CONCLUÍDA COM SUCESSO ===");
        } catch (Exception e) {
            logger.error("=== ERRO FATAL NA SINCRONIZAÇÃO ASSÍNCRONA: {} ===", e.getMessage(), e);
            // Registra o erro no SyncStatusService
            syncStatusService.registerSyncFailure("Erro fatal: " + e.getMessage());
            // Envia alerta
            alertService.sendSyncFailureAlert("Erro fatal na sincronização assíncrona: " + e.getMessage());
        }
    }
    
    /**
     * Método para executar a sincronização (anteriormente agendado, agora disparado via endpoint)
     */
    public void scheduledSync() {
        logger.info("=== INÍCIO DA SINCRONIZAÇÃO AGENDADA ===");
        logger.info("Iniciando sincronização agendada de projetos às {}", 
                LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
        
        try {
            // Verificar e remover duplicatas antes da sincronização
            removeDuplicateProjetosIfNeeded();
            
            // Usar a nova lógica simplificada de sincronização
            syncLatestProjetos();
            
            logger.info("=== SINCRONIZAÇÃO AGENDADA CONCLUÍDA COM SUCESSO ===");
        } catch (Exception e) {
            logger.error("=== ERRO FATAL NA SINCRONIZAÇÃO AGENDADA: {} ===", e.getMessage(), e);
            // Registra o erro no SyncStatusService
            syncStatusService.registerSyncFailure("Erro fatal: " + e.getMessage());
            // Envia alerta
            alertService.sendSyncFailureAlert("Erro fatal na sincronização: " + e.getMessage());
        }
    }
    
    /**
     * Sincroniza projetos a partir do mais recente de cada tipo
     * Usa uma lógica mais direta e eficiente
     */
    @Transactional
    public void syncLatestProjetos() {
        try {
            logger.info("Iniciando sincronização de projetos a partir do mais recente de cada tipo");
            
            // Ano atual
            int currentYear = Calendar.getInstance().get(Calendar.YEAR);
            
            // Recupera o projeto mais recente de cada tipo
            Map<TipoProposicao, Projeto> latestProjetos = findLatestProjetosByTipo();
            
            // Log dos projetos mais recentes encontrados
            logger.info("=== PROJETOS MAIS RECENTES POR TIPO ===");
            for (Map.Entry<TipoProposicao, Projeto> entry : latestProjetos.entrySet()) {
                TipoProposicao tipo = entry.getKey();
                Projeto projeto = entry.getValue();
                
                if (projeto != null) {
                    logger.info("TIPO: {} | Nº: {}/{}", tipo, projeto.getNumero(), projeto.getAno());
                } else {
                    logger.info("TIPO: {} | Nenhum projeto encontrado", tipo);
                }
            }
            
            // Para cada tipo de proposição, busca projetos mais recentes
            for (Map.Entry<Integer, TipoProposicao> entry : TIPO_MAP.entrySet()) {
                Integer spLegisTipo = entry.getKey();
                TipoProposicao tipo = entry.getValue();
                
                Projeto latestProjeto = latestProjetos.get(tipo);
                
                // Número inicial para busca
                int startNumero = 1;  // Por padrão, começa do 1
                int endNumero = 1500; // Número máximo arbitrário para busca
                int year = currentYear;
                
                // Se existe um projeto mais recente, começa a partir do próximo número
                if (latestProjeto != null) {
                    // Se o ano do último projeto é o ano atual, começa a partir do próximo número
                    if (latestProjeto.getAno() == currentYear) {
                        startNumero = latestProjeto.getNumero() + 1;
                        year = currentYear;
                    } 
                    // Se o ano do último projeto é anterior, começa do número 1 do ano atual
                    else {
                        startNumero = 1;
                        year = currentYear;
                    }
                }
                
                logger.info("Buscando projetos do tipo {} de {} até {} do ano {}", 
                        tipo, startNumero, endNumero, year);
                
                // Busca novos projetos na API
                List<SPLegisProjetoDTO> novoProjetos = fetchProjetosFromSPLegis(spLegisTipo, startNumero, endNumero, year);
                
                if (novoProjetos.isEmpty()) {
                    logger.info("Nenhum novo projeto do tipo {} encontrado", tipo);
                } else {
                    logger.info("Encontrados {} novos projetos do tipo {}", novoProjetos.size(), tipo);
                    
                    // Salva os novos projetos
                    saveNewProjetos(novoProjetos, tipo);
                }
            }
            
            // Registra o sucesso da sincronização
            syncStatusService.registerSyncSuccess();
            logger.info("Sincronização de projetos mais recentes concluída com sucesso");
            
        } catch (Exception e) {
            String mensagem = "Erro durante a sincronização de projetos: " + e.getMessage();
            logger.error(mensagem, e);
            syncStatusService.registerSyncFailure(mensagem);
            alertService.sendSyncFailureAlert(mensagem);
            throw new SyncProjetosException(mensagem, e);
        }
    }
    
    /**
     * Método para remover duplicatas antes da sincronização
     * Isso garante que não haverá problemas com a restrição única
     */
    @Transactional
    public void removeDuplicateProjetosIfNeeded() {
        try {
            logger.info("Verificando duplicatas na tabela projetos");
            
            // Conta o número de duplicatas
            Integer duplicateCount = 0;
            try {
                duplicateCount = projetoRepository.countDuplicates();
            } catch (Exception e) {
                logger.error("Erro ao contar duplicatas: {}", e.getMessage());
                return;
            }
            
            if (duplicateCount > 0) {
                logger.warn("Encontradas {} duplicatas na tabela projetos. Removendo...", duplicateCount);
                
                try {
                    projetoRepository.removeDuplicates();
                    logger.info("Duplicatas removidas com sucesso");
                } catch (Exception e) {
                    logger.error("Erro ao remover duplicatas: {}", e.getMessage());
                }
            } else {
                logger.info("Nenhuma duplicata encontrada na tabela projetos");
            }
        } catch (Exception e) {
            logger.error("Erro ao verificar/remover duplicatas: {}", e.getMessage());
        }
    }
    
    /**
     * Busca projetos na API do SPLegis
     */
    public List<SPLegisProjetoDTO> fetchProjetosFromSPLegis(Integer tipo, int numeroInicio, int numeroFim, int ano) {
        try {
            // Formato da URL com os parâmetros necessários
            String url = BASE_URL + 
                    "?draw=5" +
                    "&columns%5B0%5D%5Bdata%5D=&columns%5B0%5D%5Bname%5D=&columns%5B0%5D%5Bsearchable%5D=false" +
                    "&columns%5B0%5D%5Borderable%5D=false&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false" +
                    "&columns%5B1%5D%5Bdata%5D=1&columns%5B1%5D%5Bname%5D=PROJETO&columns%5B1%5D%5Bsearchable%5D=true" +
                    "&columns%5B1%5D%5Borderable%5D=true&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false" +
                    "&columns%5B2%5D%5Bdata%5D=ementa&columns%5B2%5D%5Bname%5D=EMENTA&columns%5B2%5D%5Bsearchable%5D=true" +
                    "&columns%5B2%5D%5Borderable%5D=true&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false" +
                    "&columns%5B3%5D%5Bdata%5D=norma&columns%5B3%5D%5Bname%5D=NORMA&columns%5B3%5D%5Bsearchable%5D=true" +
                    "&columns%5B3%5D%5Borderable%5D=true&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false" +
                    "&columns%5B4%5D%5Bdata%5D=assuntos&columns%5B4%5D%5Bname%5D=PALAVRA&columns%5B4%5D%5Bsearchable%5D=true" +
                    "&columns%5B4%5D%5Borderable%5D=true&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false" +
                    "&columns%5B5%5D%5Bdata%5D=promoventes&columns%5B5%5D%5Bname%5D=PROMOVENTE&columns%5B5%5D%5Bsearchable%5D=true" +
                    "&columns%5B5%5D%5Borderable%5D=true&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false" +
                    "&order%5B0%5D%5Bcolumn%5D=1&order%5B0%5D%5Bdir%5D=desc&start=0&length=1000" +
                    "&search%5Bvalue%5D=&search%5Bregex%5D=false&assuntos=&naoAssuntos=&promoventes=&naoPromoventes=" +
                    "&tipo=" + tipo +
                    "&tipoPromovente=0&tipoVeto=0&promulgadoTipo=0&votacao=&somenteEmTramitacao=false" +
                    "&leituraInicio=&leituraFim=&autuacaoI=&autuacaoF=&tipoMotivoTramitacao=&localTramitacao=" +
                    "&motivoTramitacao=&leiOperador=%3D&leiNumero=&leiAno=" +
                    "&numeroInicio=" + numeroInicio +
                    "&numeroFim=" + numeroFim +
                    "&anoInicio=" + ano +
                    "&anoFim=" + ano +
                    "&_=" + System.currentTimeMillis();
            
            // Fazer a requisição HTTP
            String response = restTemplate.getForObject(url, String.class);
            
            // Parsear a resposta JSON
            SPLegisResponseDTO spLegisResponse = objectMapper.readValue(response, SPLegisResponseDTO.class);
            
            if (spLegisResponse != null && spLegisResponse.getData() != null) {
                return spLegisResponse.getData();
            } else {
                logger.warn("Resposta vazia ou inválida da API SPLegis");
                return Collections.emptyList();
            }
            
        } catch (Exception e) {
            logger.error("Erro ao buscar projetos da API SPLegis: {}", e.getMessage(), e);
            return Collections.emptyList();
        }
    }
    
    /**
     * Converte e salva novos projetos usando upsert para evitar conflitos
     */
    @Transactional
    public void saveNewProjetos(List<SPLegisProjetoDTO> projetosDTO, TipoProposicao tipo) {
        if (projetosDTO.isEmpty()) {
            logger.info("Nenhum projeto do tipo {} para processar", tipo);
            return;
        }
        
        logger.info("Processando {} projetos do tipo {}", projetosDTO.size(), tipo);
        List<Projeto> projetosProcessados = new ArrayList<>();
        
        // Tamanho do lote para processamento de upsert
        final int BATCH_SIZE = 50;
        
        try {
            // Processa em lotes para melhorar a performance
            for (int i = 0; i < projetosDTO.size(); i += BATCH_SIZE) {
                int fim = Math.min(i + BATCH_SIZE, projetosDTO.size());
                List<SPLegisProjetoDTO> loteDTO = projetosDTO.subList(i, fim);
                
                logger.info("Processando lote de upsert {}/{} (projetos {} a {})", 
                        (i / BATCH_SIZE) + 1, 
                        (int) Math.ceil((double) projetosDTO.size() / BATCH_SIZE), 
                        i + 1, fim);
                
                List<Projeto> loteProjetos = new ArrayList<>();
                
                // Converte os DTOs para entidades
                for (SPLegisProjetoDTO dto : loteDTO) {
                    try {
                        Projeto projeto = new Projeto();
                        projeto.setTipo(tipo);
                        projeto.setNumero(dto.getNumero());
                        projeto.setAno(dto.getAno());
                        projeto.setEmenta(dto.getEmenta());
                        
                        // Extrair autores
                        if (dto.getPromoventes() != null && !dto.getPromoventes().isEmpty()) {
                            String autores = dto.getPromoventes().stream()
                                    .map(SPLegisProjetoDTO.ItemDTO::getTexto)
                                    .collect(Collectors.joining(", "));
                            projeto.setAutor(autores);
                            projeto.setAutorSearch(normalizarTexto(autores));
                        }
                        
                        // Extrair palavras-chave
                        if (dto.getAssuntos() != null && !dto.getAssuntos().isEmpty()) {
                            String palavrasChave = dto.getAssuntos().stream()
                                    .map(SPLegisProjetoDTO.ItemDTO::getTexto)
                                    .collect(Collectors.joining("|"));
                            projeto.setPalavrasChave(palavrasChave);
                        }
                        
                        loteProjetos.add(projeto);
                    } catch (Exception e) {
                        logger.error("Erro ao converter DTO para projeto {}/{} do tipo {}: {}", 
                                dto.getNumero(), dto.getAno(), tipo, e.getMessage());
                    }
                }
                
                // Executa o upsert em lote
                for (Projeto projeto : loteProjetos) {
                    try {
                        // Usar o método de upsert em lote
                        projetoRepository.upsertProjetoBatch(
                            projeto.getTipo().name(),
                            projeto.getNumero(),
                            projeto.getAno(),
                            projeto.getAutor(),
                            projeto.getAutorSearch(),
                            projeto.getEmenta(),
                            projeto.getPalavrasChave()
                        );
                        
                        // Adiciona à lista de projetos processados
                        projetosProcessados.add(projeto);
                    } catch (Exception e) {
                        logger.error("Erro ao executar upsert para projeto {}/{} do tipo {}: {}", 
                                projeto.getNumero(), projeto.getAno(), projeto.getTipo(), e.getMessage());
                    }
                }
            }
            
            // Recupera os projetos que precisam gerar embeddings
            // Precisa buscar novamente do banco, pois o upsert não retorna os IDs
            List<Projeto> projetosParaEmbedding = new ArrayList<>();
            
            // Busca em lotes para não sobrecarregar o banco
            for (int i = 0; i < projetosProcessados.size(); i += BATCH_SIZE) {
                int fim = Math.min(i + BATCH_SIZE, projetosProcessados.size());
                List<Projeto> lote = projetosProcessados.subList(i, fim);
                
                for (Projeto projeto : lote) {
                    try {
                        Projeto projetoCompleto = projetoRepository.findByTipoAndNumeroAndAno(
                                projeto.getTipo(), projeto.getNumero(), projeto.getAno());
                        
                        if (projetoCompleto != null && projetoCompleto.getEmbedding() == null) {
                            projetosParaEmbedding.add(projetoCompleto);
                        }
                    } catch (Exception e) {
                        logger.error("Erro ao buscar projeto para embedding {}/{} do tipo {}: {}", 
                                projeto.getNumero(), projeto.getAno(), projeto.getTipo(), e.getMessage());
                    }
                }
            }
            
            // Logs informativos
            logger.info("Processamento concluído para o tipo {}: {} projetos processados", 
                    tipo, projetosProcessados.size());
            
            // Gerar embeddings apenas para projetos que precisam
            if (!projetosParaEmbedding.isEmpty()) {
                logger.info("Gerando embeddings para {} projetos do tipo {}", 
                        projetosParaEmbedding.size(), tipo);
                generateEmbeddingsForNewProjetos(projetosParaEmbedding);
            }
            
        } catch (Exception e) {
            String mensagem = String.format("Erro durante o processamento de projetos do tipo %s: %s", 
                    tipo, e.getMessage());
            logger.error(mensagem, e);
            throw new SyncProjetosException(mensagem, e);
        }
    }
    
    /**
     * Gera embeddings para novos projetos
     */
    @Transactional
    public void generateEmbeddingsForNewProjetos(List<Projeto> projetos) {
        // Tamanho do lote para processamento de embeddings
        final int BATCH_SIZE = 64;
        
        if (projetos.isEmpty()) {
            return;
        }
        
        logger.info("Gerando embeddings para {} novos projetos", projetos.size());
        
        for (int i = 0; i < projetos.size(); i += BATCH_SIZE) {
            // Cria um sub-lote da lista principal
            int fim = Math.min(i + BATCH_SIZE, projetos.size());
            List<Projeto> lote = projetos.subList(i, fim);
            
            logger.info("Processando lote de embeddings {}/{} (projetos {} a {})", 
                    (i / BATCH_SIZE) + 1, 
                    (projetos.size() / BATCH_SIZE) + 1, 
                    i, fim);
            
            // Cria os textos para gerar embeddings
            List<String> textosParaEmbeddar = lote.stream()
                    .map(p -> {
                        // Constrói o texto para embedding apenas com ementa e palavras-chave
                        String ementa = "Ementa: " + (p.getEmenta() != null ? p.getEmenta() : "") + ". ";
                        // Adiciona as palavras-chave, substituindo a barra por espaços para um texto mais natural
                        String palavrasChave = "Palavras-chave: " + 
                                (p.getPalavrasChave() != null ? p.getPalavrasChave().replace("|", " ") : "") + ".";

                        return ementa + palavrasChave;
                    })
                    .collect(Collectors.toList());
            
            try {
                // Gera os embeddings apenas para o lote atual
                float[][] embeddingsDoLote = embeddingService.generateEmbeddings(textosParaEmbeddar);
                
                // Associa cada embedding de volta ao seu projeto original
                for (int j = 0; j < lote.size(); j++) {
                    Projeto projeto = lote.get(j);
                    projeto.setEmbedding(embeddingsDoLote[j]);
                }
                
                // Salva os projetos atualizados imediatamente após cada lote
                projetoRepository.saveAll(lote);
                logger.info("Lote {}/{} de embeddings gerado e salvo com sucesso", 
                        (i / BATCH_SIZE) + 1, 
                        (projetos.size() / BATCH_SIZE) + 1);
                
            } catch (Exception e) {
                logger.error("Erro ao gerar embeddings para o lote {}: {}", 
                        (i / BATCH_SIZE) + 1, e.getMessage(), e);
            }
        }
        
        logger.info("Embeddings gerados e salvos com sucesso para {} projetos", projetos.size());
    }
    
    // Método auxiliar para normalizar texto para busca (minúsculas, sem acentos)
    private String normalizarTexto(String texto) {
        if (texto == null) return "";
        String textoNormalizado = Normalizer.normalize(texto, Normalizer.Form.NFD);
        Pattern pattern = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");
        return pattern.matcher(textoNormalizado).replaceAll("").toLowerCase();
    }
}